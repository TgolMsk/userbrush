# Generated by Django 4.1 on 2022-09-03 19:26

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserConf',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_phonenumber', models.CharField(max_length=16, unique=True, verbose_name='手机号')),
                ('user_img', models.ImageField(default='default.jpg', null=True, upload_to='head_image/%Y/%m', verbose_name='用户头像')),
                ('user_password', models.CharField(max_length=24, verbose_name='登陆密码')),
                ('user_result', models.BooleanField(default=1, null=True, verbose_name='用户状态 True为允许登陆False为禁止登陆')),
                ('user_tc_password', models.CharField(max_length=6, verbose_name='6为交易密码')),
                ('user_name', models.CharField(default='', max_length=12, null=True, verbose_name='用户名称')),
                ('user_vip', models.PositiveSmallIntegerField(default=0, null=True, verbose_name='会员VIP等级')),
                ('user_reg_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='注册时间')),
                ('user_login_time', models.DateTimeField(null=True, verbose_name='登陆时间')),
                ('user_set_time', models.DateTimeField(auto_now=True, null=True, verbose_name='最后_更改时间')),
                ('user_ip', models.GenericIPAddressField(default='127.0.0.1', null=True, protocol='IPv4', verbose_name='用户注册ip地址')),
            ],
            options={
                'verbose_name': '会员用户信息',
                'verbose_name_plural': '会员用户信息',
                'db_table': 'user_conf',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nick_name', models.CharField(max_length=50, verbose_name='别名')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户信息扩展',
                'verbose_name_plural': '用户信息扩展',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
